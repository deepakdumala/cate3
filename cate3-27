def search_rotated_array(nums, target):
    # Perform binary search to find the pivot point
    left, right = 0, len(nums) - 1
    while left < right:
        mid = left + (right - left) // 2
        if nums[mid] > nums[right]:
            left = mid + 1
        else:
            right = mid
    
    # Set pivot as the starting point for the next binary search
    pivot = left
    
    # Perform binary search in the appropriate subarray
    left, right = 0, len(nums) - 1
    while left <= right:
        mid = left + (right - left) // 2
        rotated_mid = (mid + pivot) % len(nums)
        if nums[rotated_mid] == target:
            return rotated_mid
        elif nums[rotated_mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    
    # If the target is not found, return -1
    return -1

# Example usage
nums = [4, 5, 6, 7, 0, 1, 2]
target = 0
index = search_rotated_array(nums, target)
print(f'The index of the target element {target} is: {index}')
